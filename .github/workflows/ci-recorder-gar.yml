# Run CI from GAR (google artifact registry) image weekly (to reduce egress costs)
name: ci (recorder) from GAR
on:
  schedule:
    - cron: "25 15 * * 6"

env:
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"

jobs:
  ci-linux:
    name: ${{ matrix.os }} (${{ matrix.cmake-preset }})
    env:
      GCC_VERSION: 13
      SONAR_WRAPPER: build-wrapper-linux-x86-64 --out-dir ./build-wrapper-output
      SONAR_ARGS: --define sonar.cfamily.build-wrapper-output=recorder/build-wrapper-output
    container:
      image: europe-west3-docker.pkg.dev/devcontainers-396515/cpp/linux:latest
      credentials:
        username: _json_key_base64
        password: ${{ secrets.GCLOUD_JSON_KEY }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        cmake-preset:
          - gcc-gcov
          - clang-release-tidy
        include:
          - os: ubuntu-latest
            cmake-preset: gcc-gcov
            gcov: true
            sonar: true

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0 # vcpkg submodule uses ''baseline', which requires full git history
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Prepare vcpkg
        uses: "./.github/prepare-vcpkg"
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install sonar-scanner and build-wrapper
        if: matrix.sonar
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: Cmake build and test
        uses: "./.github/cmake-build-test"
        with:
          preset: ${{ matrix.cmake-preset }}
          sonar: ${{ matrix.sonar }}

      - name: Run gcovr (collect gcov based coverage)
        if: matrix.gcov
        shell: pwsh
        run: |
          if (${{ contains(matrix.cmake-preset, 'clang') }}) {
            $exec =  'llvm-cov gcov'
          }
          else {
            $exec = 'gcov-${{ env.GCC_VERSION }}'
          }
          gcovr --sonarqube --exclude-unreachable-branches --gcov-executable $exec --output coverage_gcov.xml --gcov-ignore-parse-errors=negative_hits.warn

      - name: Run llvm-cov (collect llvm profile based coverage)
        if: matrix.llvmprofile
        shell: pwsh
        run:
          | # remember to merge all test files if multiple test projects are run
          $test_location = "${{ github.workspace }}/recorder/build/${{ matrix.cmake-preset }}/test"
          $result_file = "$test_location/default.profraw"
          $test_executable = "$test_location/tests"
          Write-Host "merging file $(Get-ChildItem $result_file)"
          llvm-profdata merge -o merged.profdata $result_file
          llvm-cov show --instr-profile merged.profdata $test_executable > coverage_llvm.txt

      - name: Coverage report debug info
        if: matrix.gcov && env.RUNNER_DEBUG
        shell: pwsh
        run: |
          Write-Host "listing .gcno and .gcda files:"
          Get-ChildItem -Path .\ -Filter *.gcno -Recurse -File -Name
          Get-ChildItem -Path .\ -Filter *.gcda -Recurse -File -Name
          Write-Host "Content of 'coverage.xml':"
          Get-Content coverage.xml

      - name: Run sonar-scanner (for gcov based coverage))
        if: matrix.sonar && matrix.gcov
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: sonar-scanner ${{ env.SONAR_ARGS }} --define sonar.coverageReportPaths=coverage_gcov.xml

      - name: Run sonar-scanner (for llvm profile based coverage))
        if: matrix.sonar && matrix.llvmprofile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: sonar-scanner ${{ env.SONAR_ARGS }} --define sonar.cfamily.llvm-cov.reportPath=coverage_llvm.txt
