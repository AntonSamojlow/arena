# CI workflow that builds and tests the code on different os and compilers
# relies on the CMakePresets.json entries

# inspired by / adapted from:
# https://github.com/lukka/CppCMakeVcpkgTemplate/blob/main/.github/workflows/hosted-pure-workflow.yml

name: ci (recorder-sonar)
on:
  schedule:
    - cron: '25 18 * * SUN'
      branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

jobs:
  job:
    name: CI (${{ matrix.os }}-${{ matrix.configure-preset }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
        configure-preset: 
          - msvc-release
        architecture:
          - x64  # used to compose a 'vcpkg-triplet-like' label for the cache key (see below) 
 
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/recorder/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/recorder/vcpkg/bincache
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # sonarcloud suggests: 'Shallow clones should be disabled for a better relevancy of analysis'
          submodules: true
      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      # Restore both vcpkg and its artifacts from the GitHub cache service.
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v3
        with:
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
          # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
            !${{ env.VCPKG_ROOT }}/installed
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.os }}-${{ matrix.architecture }}

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. 
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: Cmake Configure ${{ matrix.configure-preset }}
        working-directory: recorder
        run: |
          cmake --preset ${{ matrix.configure-preset }}

      - name: Cmake Build
        if: ${{ matrix.build-preset == '' }}
        working-directory: recorder/build/${{ matrix.configure-preset }}
        run: |
          build-wrapper-win-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build .

      - name: Cmake Build (preset ${{ matrix.build-preset }})
        if: ${{ matrix.build-preset != '' }}
        working-directory: recorder
        run: |
          build-wrapper-win-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build --preset ${{ matrix.build-preset }}

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
      - name: Run CTest ${{ matrix.configure-preset }}
        if: ${{ matrix.test-preset == '' }}
        working-directory: recorder/build/${{ matrix.configure-preset }}
        run: |
          ctest

      - name: Run CTest (preset ${{ matrix.test-preset }})
        if: ${{ matrix.test-preset != '' }}
        working-directory: recorder
        run: |
          ctest --preset ${{ matrix.test-preset }}
