# CI workflow that builds and tests the code on different os and compilers
# relies on the CMakePresets.json entries

# inspired by / adapted from:
# https://github.com/lukka/CppCMakeVcpkgTemplate/blob/main/.github/workflows/hosted-pure-workflow.yml

name: ci (recorder)
on:
  schedule:
    - cron: "25 16 * * *"
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

env:
  VS_VERSION: 2022
  CLANG_VERSION: 15
  GCC_VERSION: 12

jobs:
  ci-linux:
    name: ${{ matrix.os }} (${{ matrix.cmake-preset }})
    env:
      SONAR_WRAPPER: build-wrapper-linux-x86-64 --out-dir ./build-wrapper-output
      SONAR_ARGS: >
        --define sonar.cfamily.build-wrapper-output=recorder/build-wrapper-output
        --define sonar.coverageReportPaths=coverage.xml

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest

        cmake-preset:
          - gcc-debug-gcov

        # used to compose a 'vcpkg-triplet-like' label for the cache key (see below)
        platform:
          - x64

        include:
          - os: ubuntu-latest
            cmake-preset: gcc-debug-gcov
            gcov: true

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0 # vcpkg submodule uses ''baseline', which requires full git history
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Prepare vcpkg, cmake and ninja
        uses: "./.github/prepare-vcpkg-cmake"
        with:
          os: windows
          platform: x64
          vcpkg_root: ${{ github.workspace }}/recorder/vcpkg
          vcpkg_default_cache: ${{ github.workspace }}/recorder/vcpkg/bincache

      - name: Setup linux tools
        uses: "./.github/setup-linux-tools"
        with:
          clang: ${{ contains(matrix.cmake-preset, 'clang') }}
          gcc: ${{ contains(matrix.cmake-preset, 'gcc') }}
          gcov: ${{ matrix.gcov }}
          sonar: ${{ matrix.sonar }}

      - name: Cmake build and test
        uses: "./.github/cmake-build-test"
        with:
          preset: ${{ matrix.cmake-preset }}
          sonar: ${{ matrix.sonar }}

      - name: Run gcovr (collect gcov based coverage)
        if: matrix.gcov
        shell: pwsh
        run: |
          $exec = "gcov-${{ env.GCC_VERSION }}"
          if( ${{ contains(matrix.cmake-preset, 'clang') }} ) { $exec = "llvm-cov gcov" }
          gcovr --gcov-executable "$exec" --verbose --sonarqube --exclude-unreachable-branches --output coverage.xml

      - name: Run llvm-cov (collect llvm profile based coverage)
        if: matrix.llvmprof
        shell: pwsh
        run: | # remember to merge all test files if multiple test projects are run
          $test_executable = "tests"
          $test_location = "${{ github.workspace }}/recorder/build/${{ inputs.preset }}/test"
          $result_file = $test_location/default.profraw
          Write-Host "merging file $(Get-ChildItem $result_file)"
          llvm-profdata merge -o merged.profdata $result_file
          llvm-cov show --instr-profile merged.profdata "$test_location/$test_executable" > coverage.txt

      - name: Coverage report debug info
        if: matrix.gcov # && env.RUNNER_DEBUG
        shell: pwsh
        run: |
          Write-Host "listing .gcno and .gcda files:"
          Get-ChildItem -Path .\ -Filter *.gcno -Recurse -File -Name
          Get-ChildItem -Path .\ -Filter *.gcda -Recurse -File -Name
          Write-Host "Content of 'coverage.xml':"
          Get-Content coverage.xml

      - name: Run sonar-scanner
        if: ${{ matrix.sonar-wrapper != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          sonar-scanner ${{ matrix.sonar-args }}
