# CI workflow that builds and tests the code on different os and compilers
# relies on the CMakePresets.json entries

# inspired by / adapted from:
# https://github.com/lukka/CppCMakeVcpkgTemplate/blob/main/.github/workflows/hosted-pure-workflow.yml

name: ci (recorder)
on:
  schedule:
    - cron: "25 16 * * *"
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

env:
  VS_VERSION: 2022
  CLANG_VERSION: 15
  GCC_VERSION: 12
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"

jobs:
  ci-windows:
    name: ${{ matrix.os }} (${{ matrix.cmake-preset }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
        cmake-preset:
          - x64-msvc-release
          - x64-msvc-debug
          - x64-clang-cl-release-tidy

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0 # vcpkg submodule uses 'baseline', which requires full git history
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Prepare vcpkg, cmake and ninja
        uses: "./.github/prepare-vcpkg-cmake"
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          vsversion: ${{ env.VS_VERSION }}
          arch: x64

      - name: Cmake build and test
        uses: "./.github/cmake-build-test"
        with:
          preset: ${{ matrix.cmake-preset }}

  ci-linux:
    name: ${{ matrix.os }} (${{ matrix.cmake-preset }})
    env:
      SONAR_WRAPPER: build-wrapper-linux-x86-64 --out-dir ./build-wrapper-output
      SONAR_ARGS: --define sonar.cfamily.build-wrapper-output=recorder/build-wrapper-output
    container:
      image: europe-west3-docker.pkg.dev/arena-385320/recorder/linux-dev:latest
      credentials:
        username: _json_key_base64
        password: ${{ secrets.GCLOUD_JSON_KEY }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        cmake-preset:
          - gcc-gcov
          - gcc-release
          - clang-debug
          - clang-release-tidy
        include:
          - os: ubuntu-latest
            cmake-preset: gcc-gcov
            gcov: true
            sonar: true

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0 # vcpkg submodule uses ''baseline', which requires full git history
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: debug
        shell: pwsh
        working-directory: recorder/vcpkg
        run: Get-ChildItem | Select-Object UnixMode, Length, Name

      - name: "Setup NuGet Credentials"
        shell: pwsh
        run: |
          $source = "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          recorder/vcpkg/vcpkg fetch nuget
          $nuget_exe = recorder/vcpkg/vcpkg fetch nuget
          & ${{ inputs.nuget_cmd_prefix }} $nuget_exe sources add -source $source -storepasswordincleartext -name "GitHub" -username "${{ github.repository_owner }}" -password "${{ inputs.github_token }}"
          & ${{ inputs.nuget_cmd_prefix }} $nuget_exe setapikey "${{ inputs.github_token }}" -source $source

      - name: Install sonar-scanner and build-wrapper
        if: matrix.sonar
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: Cmake build and test
        uses: "./.github/cmake-build-test"
        with:
          preset: ${{ matrix.cmake-preset }}
          sonar: ${{ matrix.sonar }}

      - name: Run gcovr (collect gcov based coverage)
        if: matrix.gcov
        shell: pwsh
        run: |
          if (${{ contains(matrix.cmake-preset, 'clang') }}) {
            $exec =  'llvm-cov gcov'
          }
          else {
            $exec = 'gcov-${{ env.GCC_VERSION }}'
          }
          gcovr --sonarqube --exclude-unreachable-branches --gcov-executable $exec --output coverage_gcov.xml

      - name: Run llvm-cov (collect llvm profile based coverage)
        if: matrix.llvmprofile
        shell: pwsh
        run:
          | # remember to merge all test files if multiple test projects are run
          $test_location = "${{ github.workspace }}/recorder/build/${{ matrix.cmake-preset }}/test"
          $result_file = "$test_location/default.profraw"
          $test_executable = "$test_location/tests"
          Write-Host "merging file $(Get-ChildItem $result_file)"
          llvm-profdata merge -o merged.profdata $result_file
          llvm-cov show --instr-profile merged.profdata $test_executable > coverage_llvm.txt

      - name: Coverage report debug info
        if: matrix.gcov && env.RUNNER_DEBUG
        shell: pwsh
        run: |
          Write-Host "listing .gcno and .gcda files:"
          Get-ChildItem -Path .\ -Filter *.gcno -Recurse -File -Name
          Get-ChildItem -Path .\ -Filter *.gcda -Recurse -File -Name
          Write-Host "Content of 'coverage.xml':"
          Get-Content coverage.xml

      - name: Run sonar-scanner (for gcov based coverage))
        if: matrix.sonar && matrix.gcov
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: sonar-scanner ${{ env.SONAR_ARGS }} --define sonar.coverageReportPaths=coverage_gcov.xml

      - name: Run sonar-scanner (for llvm profile based coverage))
        if: matrix.sonar && matrix.llvmprofile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: sonar-scanner ${{ env.SONAR_ARGS }} --define sonar.cfamily.llvm-cov.reportPath=coverage_llvm.txt

  formatting-check:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: clang-format src
        if: always()
        uses: jidicula/clang-format-action@v4.9.0
        with:
          clang-format-version: ${{ env.CLANG_VERSION}}
          check-path: "recorder/src"
          # exclude: '(hello|world)' # Exclude file paths containing "hello" or "world"
          exclude-regex: ""
      - name: clang-format test
        if: always()
        uses: jidicula/clang-format-action@v4.9.0
        with:
          clang-format-version: ${{ env.CLANG_VERSION}}
          check-path: "recorder/test"
          exclude-regex: ""
